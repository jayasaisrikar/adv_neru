/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BusinessCryptoService } from "../businessCrypto.service";
import { BusinessCryptoCreateInput } from "./BusinessCryptoCreateInput";
import { BusinessCrypto } from "./BusinessCrypto";
import { BusinessCryptoFindManyArgs } from "./BusinessCryptoFindManyArgs";
import { BusinessCryptoWhereUniqueInput } from "./BusinessCryptoWhereUniqueInput";
import { BusinessCryptoUpdateInput } from "./BusinessCryptoUpdateInput";

export class BusinessCryptoControllerBase {
  constructor(protected readonly service: BusinessCryptoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BusinessCrypto })
  async createBusinessCrypto(
    @common.Body() data: BusinessCryptoCreateInput
  ): Promise<BusinessCrypto> {
    return await this.service.createBusinessCrypto({
      data: {
        ...data,

        advertiser: data.advertiser
          ? {
              connect: data.advertiser,
            }
          : undefined,
      },
      select: {
        advertiser: {
          select: {
            id: true,
          },
        },

        amountAcquired: true,
        createdAt: true,
        dateAcquired: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BusinessCrypto] })
  @ApiNestedQuery(BusinessCryptoFindManyArgs)
  async businessCryptos(
    @common.Req() request: Request
  ): Promise<BusinessCrypto[]> {
    const args = plainToClass(BusinessCryptoFindManyArgs, request.query);
    return this.service.businessCryptos({
      ...args,
      select: {
        advertiser: {
          select: {
            id: true,
          },
        },

        amountAcquired: true,
        createdAt: true,
        dateAcquired: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BusinessCrypto })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async businessCrypto(
    @common.Param() params: BusinessCryptoWhereUniqueInput
  ): Promise<BusinessCrypto | null> {
    const result = await this.service.businessCrypto({
      where: params,
      select: {
        advertiser: {
          select: {
            id: true,
          },
        },

        amountAcquired: true,
        createdAt: true,
        dateAcquired: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BusinessCrypto })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBusinessCrypto(
    @common.Param() params: BusinessCryptoWhereUniqueInput,
    @common.Body() data: BusinessCryptoUpdateInput
  ): Promise<BusinessCrypto | null> {
    try {
      return await this.service.updateBusinessCrypto({
        where: params,
        data: {
          ...data,

          advertiser: data.advertiser
            ? {
                connect: data.advertiser,
              }
            : undefined,
        },
        select: {
          advertiser: {
            select: {
              id: true,
            },
          },

          amountAcquired: true,
          createdAt: true,
          dateAcquired: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BusinessCrypto })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBusinessCrypto(
    @common.Param() params: BusinessCryptoWhereUniqueInput
  ): Promise<BusinessCrypto | null> {
    try {
      return await this.service.deleteBusinessCrypto({
        where: params,
        select: {
          advertiser: {
            select: {
              id: true,
            },
          },

          amountAcquired: true,
          createdAt: true,
          dateAcquired: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/fetchTotalBusinessCrypto")
  @swagger.ApiOkResponse({
    type: Number,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async FetchTotalBusinessCrypto(
    @common.Body()
    body: string
  ): Promise<number> {
    return this.service.FetchTotalBusinessCrypto(body);
  }

  @common.Get("/:id/get-total-business-crypto-acquired")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetTotalBusinessCryptoAcquired(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.GetTotalBusinessCryptoAcquired(body);
  }
}
