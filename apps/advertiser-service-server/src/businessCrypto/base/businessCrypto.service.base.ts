/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  BusinessCrypto as PrismaBusinessCrypto,
  Advertiser as PrismaAdvertiser,
} from "@prisma/client";

import { BusinessCryptoFindManyArgs } from "./BusinessCryptoFindManyArgs";

export class BusinessCryptoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BusinessCryptoCountArgs, "select">
  ): Promise<number> {
    return this.prisma.businessCrypto.count(args);
  }

  async businessCryptos<T extends Prisma.BusinessCryptoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BusinessCryptoFindManyArgs>
  ): Promise<PrismaBusinessCrypto[]> {
    return this.prisma.businessCrypto.findMany<Prisma.BusinessCryptoFindManyArgs>(
      args
    );
  }
  async businessCrypto<T extends Prisma.BusinessCryptoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BusinessCryptoFindUniqueArgs>
  ): Promise<PrismaBusinessCrypto | null> {
    return this.prisma.businessCrypto.findUnique(args);
  }
  async createBusinessCrypto<T extends Prisma.BusinessCryptoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BusinessCryptoCreateArgs>
  ): Promise<PrismaBusinessCrypto> {
    return this.prisma.businessCrypto.create<T>(args);
  }
  async updateBusinessCrypto<T extends Prisma.BusinessCryptoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BusinessCryptoUpdateArgs>
  ): Promise<PrismaBusinessCrypto> {
    return this.prisma.businessCrypto.update<T>(args);
  }
  async deleteBusinessCrypto<T extends Prisma.BusinessCryptoDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BusinessCryptoDeleteArgs>
  ): Promise<PrismaBusinessCrypto> {
    return this.prisma.businessCrypto.delete(args);
  }

  async getAdvertiser(parentId: string): Promise<PrismaAdvertiser | null> {
    return this.prisma.businessCrypto
      .findUnique({
        where: { id: parentId },
      })
      .advertiser();
  }
  async FetchTotalBusinessCrypto(
    args: BusinessCryptoFindManyArgs
  ): Promise<number> {
    throw new Error("Not implemented");
  }
  async GetTotalBusinessCryptoAcquired(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
