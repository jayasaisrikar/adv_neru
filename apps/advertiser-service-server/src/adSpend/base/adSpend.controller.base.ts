/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AdSpendService } from "../adSpend.service";
import { AdSpendCreateInput } from "./AdSpendCreateInput";
import { AdSpend } from "./AdSpend";
import { AdSpendFindManyArgs } from "./AdSpendFindManyArgs";
import { AdSpendWhereUniqueInput } from "./AdSpendWhereUniqueInput";
import { AdSpendUpdateInput } from "./AdSpendUpdateInput";

export class AdSpendControllerBase {
  constructor(protected readonly service: AdSpendService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AdSpend })
  async createAdSpend(
    @common.Body() data: AdSpendCreateInput
  ): Promise<AdSpend> {
    return await this.service.createAdSpend({
      data: {
        ...data,

        advertiser: data.advertiser
          ? {
              connect: data.advertiser,
            }
          : undefined,
      },
      select: {
        advertiser: {
          select: {
            id: true,
          },
        },

        amount: true,
        createdAt: true,
        date: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AdSpend] })
  @ApiNestedQuery(AdSpendFindManyArgs)
  async adSpends(@common.Req() request: Request): Promise<AdSpend[]> {
    const args = plainToClass(AdSpendFindManyArgs, request.query);
    return this.service.adSpends({
      ...args,
      select: {
        advertiser: {
          select: {
            id: true,
          },
        },

        amount: true,
        createdAt: true,
        date: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AdSpend })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async adSpend(
    @common.Param() params: AdSpendWhereUniqueInput
  ): Promise<AdSpend | null> {
    const result = await this.service.adSpend({
      where: params,
      select: {
        advertiser: {
          select: {
            id: true,
          },
        },

        amount: true,
        createdAt: true,
        date: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AdSpend })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAdSpend(
    @common.Param() params: AdSpendWhereUniqueInput,
    @common.Body() data: AdSpendUpdateInput
  ): Promise<AdSpend | null> {
    try {
      return await this.service.updateAdSpend({
        where: params,
        data: {
          ...data,

          advertiser: data.advertiser
            ? {
                connect: data.advertiser,
              }
            : undefined,
        },
        select: {
          advertiser: {
            select: {
              id: true,
            },
          },

          amount: true,
          createdAt: true,
          date: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AdSpend })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAdSpend(
    @common.Param() params: AdSpendWhereUniqueInput
  ): Promise<AdSpend | null> {
    try {
      return await this.service.deleteAdSpend({
        where: params,
        select: {
          advertiser: {
            select: {
              id: true,
            },
          },

          amount: true,
          createdAt: true,
          date: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/fetchTotalAdSpend")
  @swagger.ApiOkResponse({
    type: Number,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async FetchTotalAdSpend(
    @common.Body()
    body: string
  ): Promise<number> {
    return this.service.FetchTotalAdSpend(body);
  }

  @common.Get("/:id/get-total-ad-spend")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetTotalAdSpend(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.GetTotalAdSpend(body);
  }
}
