/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AdSpend as PrismaAdSpend,
  Advertiser as PrismaAdvertiser,
} from "@prisma/client";
import { AdSpendCountArgs } from "./AdSpendCountArgs";

export class AdSpendServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AdSpendCountArgs, "select">): Promise<number> {
    return this.prisma.adSpend.count(args);
  }

  async adSpends<T extends Prisma.AdSpendFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdSpendFindManyArgs>
  ): Promise<PrismaAdSpend[]> {
    return this.prisma.adSpend.findMany<Prisma.AdSpendFindManyArgs>(args);
  }
  async adSpend<T extends Prisma.AdSpendFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdSpendFindUniqueArgs>
  ): Promise<PrismaAdSpend | null> {
    return this.prisma.adSpend.findUnique(args);
  }
  async createAdSpend<T extends Prisma.AdSpendCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdSpendCreateArgs>
  ): Promise<PrismaAdSpend> {
    return this.prisma.adSpend.create<T>(args);
  }
  async updateAdSpend<T extends Prisma.AdSpendUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdSpendUpdateArgs>
  ): Promise<PrismaAdSpend> {
    return this.prisma.adSpend.update<T>(args);
  }
  async deleteAdSpend<T extends Prisma.AdSpendDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdSpendDeleteArgs>
  ): Promise<PrismaAdSpend> {
    return this.prisma.adSpend.delete(args);
  }

  async getAdvertiser(parentId: string): Promise<PrismaAdvertiser | null> {
    return this.prisma.adSpend
      .findUnique({
        where: { id: parentId },
      })
      .advertiser();
  }
  async FetchTotalAdSpend(args: AdSpendCountArgs): Promise<number> {
    throw new Error("Not implemented");
  }
  async GetTotalAdSpend(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
