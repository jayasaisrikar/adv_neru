/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  AdLocation as PrismaAdLocation,
  Advertiser as PrismaAdvertiser,
} from "@prisma/client";

export class AdLocationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AdLocationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.adLocation.count(args);
  }

  async adLocations<T extends Prisma.AdLocationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdLocationFindManyArgs>
  ): Promise<PrismaAdLocation[]> {
    return this.prisma.adLocation.findMany<Prisma.AdLocationFindManyArgs>(args);
  }
  async adLocation<T extends Prisma.AdLocationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdLocationFindUniqueArgs>
  ): Promise<PrismaAdLocation | null> {
    return this.prisma.adLocation.findUnique(args);
  }
  async createAdLocation<T extends Prisma.AdLocationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdLocationCreateArgs>
  ): Promise<PrismaAdLocation> {
    return this.prisma.adLocation.create<T>(args);
  }
  async updateAdLocation<T extends Prisma.AdLocationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdLocationUpdateArgs>
  ): Promise<PrismaAdLocation> {
    return this.prisma.adLocation.update<T>(args);
  }
  async deleteAdLocation<T extends Prisma.AdLocationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AdLocationDeleteArgs>
  ): Promise<PrismaAdLocation> {
    return this.prisma.adLocation.delete(args);
  }

  async getAdvertiser(parentId: string): Promise<PrismaAdvertiser | null> {
    return this.prisma.adLocation
      .findUnique({
        where: { id: parentId },
      })
      .advertiser();
  }
}
