/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AdLocationService } from "../adLocation.service";
import { AdLocationCreateInput } from "./AdLocationCreateInput";
import { AdLocation } from "./AdLocation";
import { AdLocationFindManyArgs } from "./AdLocationFindManyArgs";
import { AdLocationWhereUniqueInput } from "./AdLocationWhereUniqueInput";
import { AdLocationUpdateInput } from "./AdLocationUpdateInput";

export class AdLocationControllerBase {
  constructor(protected readonly service: AdLocationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AdLocation })
  async createAdLocation(
    @common.Body() data: AdLocationCreateInput
  ): Promise<AdLocation> {
    return await this.service.createAdLocation({
      data: {
        ...data,

        advertiser: data.advertiser
          ? {
              connect: data.advertiser,
            }
          : undefined,
      },
      select: {
        advertiser: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        locationName: true,
        updatedAt: true,
        virtualWorld: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AdLocation] })
  @ApiNestedQuery(AdLocationFindManyArgs)
  async adLocations(@common.Req() request: Request): Promise<AdLocation[]> {
    const args = plainToClass(AdLocationFindManyArgs, request.query);
    return this.service.adLocations({
      ...args,
      select: {
        advertiser: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        locationName: true,
        updatedAt: true,
        virtualWorld: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AdLocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async adLocation(
    @common.Param() params: AdLocationWhereUniqueInput
  ): Promise<AdLocation | null> {
    const result = await this.service.adLocation({
      where: params,
      select: {
        advertiser: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        locationName: true,
        updatedAt: true,
        virtualWorld: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AdLocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAdLocation(
    @common.Param() params: AdLocationWhereUniqueInput,
    @common.Body() data: AdLocationUpdateInput
  ): Promise<AdLocation | null> {
    try {
      return await this.service.updateAdLocation({
        where: params,
        data: {
          ...data,

          advertiser: data.advertiser
            ? {
                connect: data.advertiser,
              }
            : undefined,
        },
        select: {
          advertiser: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          locationName: true,
          updatedAt: true,
          virtualWorld: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AdLocation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAdLocation(
    @common.Param() params: AdLocationWhereUniqueInput
  ): Promise<AdLocation | null> {
    try {
      return await this.service.deleteAdLocation({
        where: params,
        select: {
          advertiser: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          locationName: true,
          updatedAt: true,
          virtualWorld: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
