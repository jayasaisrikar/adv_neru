/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AdLocation } from "./AdLocation";
import { AdLocationCountArgs } from "./AdLocationCountArgs";
import { AdLocationFindManyArgs } from "./AdLocationFindManyArgs";
import { AdLocationFindUniqueArgs } from "./AdLocationFindUniqueArgs";
import { CreateAdLocationArgs } from "./CreateAdLocationArgs";
import { UpdateAdLocationArgs } from "./UpdateAdLocationArgs";
import { DeleteAdLocationArgs } from "./DeleteAdLocationArgs";
import { Advertiser } from "../../advertiser/base/Advertiser";
import { AdLocationService } from "../adLocation.service";
@graphql.Resolver(() => AdLocation)
export class AdLocationResolverBase {
  constructor(protected readonly service: AdLocationService) {}

  async _adLocationsMeta(
    @graphql.Args() args: AdLocationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AdLocation])
  async adLocations(
    @graphql.Args() args: AdLocationFindManyArgs
  ): Promise<AdLocation[]> {
    return this.service.adLocations(args);
  }

  @graphql.Query(() => AdLocation, { nullable: true })
  async adLocation(
    @graphql.Args() args: AdLocationFindUniqueArgs
  ): Promise<AdLocation | null> {
    const result = await this.service.adLocation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AdLocation)
  async createAdLocation(
    @graphql.Args() args: CreateAdLocationArgs
  ): Promise<AdLocation> {
    return await this.service.createAdLocation({
      ...args,
      data: {
        ...args.data,

        advertiser: args.data.advertiser
          ? {
              connect: args.data.advertiser,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => AdLocation)
  async updateAdLocation(
    @graphql.Args() args: UpdateAdLocationArgs
  ): Promise<AdLocation | null> {
    try {
      return await this.service.updateAdLocation({
        ...args,
        data: {
          ...args.data,

          advertiser: args.data.advertiser
            ? {
                connect: args.data.advertiser,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AdLocation)
  async deleteAdLocation(
    @graphql.Args() args: DeleteAdLocationArgs
  ): Promise<AdLocation | null> {
    try {
      return await this.service.deleteAdLocation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Advertiser, {
    nullable: true,
    name: "advertiser",
  })
  async getAdvertiser(
    @graphql.Parent() parent: AdLocation
  ): Promise<Advertiser | null> {
    const result = await this.service.getAdvertiser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
