/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Advertiser } from "./Advertiser";
import { AdvertiserCountArgs } from "./AdvertiserCountArgs";
import { AdvertiserFindManyArgs } from "./AdvertiserFindManyArgs";
import { AdvertiserFindUniqueArgs } from "./AdvertiserFindUniqueArgs";
import { CreateAdvertiserArgs } from "./CreateAdvertiserArgs";
import { UpdateAdvertiserArgs } from "./UpdateAdvertiserArgs";
import { DeleteAdvertiserArgs } from "./DeleteAdvertiserArgs";
import { AdLocationFindManyArgs } from "../../adLocation/base/AdLocationFindManyArgs";
import { AdLocation } from "../../adLocation/base/AdLocation";
import { AdSpendFindManyArgs } from "../../adSpend/base/AdSpendFindManyArgs";
import { AdSpend } from "../../adSpend/base/AdSpend";
import { BusinessCryptoFindManyArgs } from "../../businessCrypto/base/BusinessCryptoFindManyArgs";
import { BusinessCrypto } from "../../businessCrypto/base/BusinessCrypto";
import { AdvertiserService } from "../advertiser.service";
@graphql.Resolver(() => Advertiser)
export class AdvertiserResolverBase {
  constructor(protected readonly service: AdvertiserService) {}

  async _advertisersMeta(
    @graphql.Args() args: AdvertiserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Advertiser])
  async advertisers(
    @graphql.Args() args: AdvertiserFindManyArgs
  ): Promise<Advertiser[]> {
    return this.service.advertisers(args);
  }

  @graphql.Query(() => Advertiser, { nullable: true })
  async advertiser(
    @graphql.Args() args: AdvertiserFindUniqueArgs
  ): Promise<Advertiser | null> {
    const result = await this.service.advertiser(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Advertiser)
  async createAdvertiser(
    @graphql.Args() args: CreateAdvertiserArgs
  ): Promise<Advertiser> {
    return await this.service.createAdvertiser({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Advertiser)
  async updateAdvertiser(
    @graphql.Args() args: UpdateAdvertiserArgs
  ): Promise<Advertiser | null> {
    try {
      return await this.service.updateAdvertiser({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Advertiser)
  async deleteAdvertiser(
    @graphql.Args() args: DeleteAdvertiserArgs
  ): Promise<Advertiser | null> {
    try {
      return await this.service.deleteAdvertiser(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [AdLocation], { name: "adLocations" })
  async findAdLocations(
    @graphql.Parent() parent: Advertiser,
    @graphql.Args() args: AdLocationFindManyArgs
  ): Promise<AdLocation[]> {
    const results = await this.service.findAdLocations(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [AdSpend], { name: "adSpends" })
  async findAdSpends(
    @graphql.Parent() parent: Advertiser,
    @graphql.Args() args: AdSpendFindManyArgs
  ): Promise<AdSpend[]> {
    const results = await this.service.findAdSpends(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [BusinessCrypto], { name: "businessCryptos" })
  async findBusinessCryptos(
    @graphql.Parent() parent: Advertiser,
    @graphql.Args() args: BusinessCryptoFindManyArgs
  ): Promise<BusinessCrypto[]> {
    const results = await this.service.findBusinessCryptos(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
