/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AdvertiserService } from "../advertiser.service";
import { AdvertiserCreateInput } from "./AdvertiserCreateInput";
import { Advertiser } from "./Advertiser";
import { AdvertiserFindManyArgs } from "./AdvertiserFindManyArgs";
import { AdvertiserWhereUniqueInput } from "./AdvertiserWhereUniqueInput";
import { AdvertiserUpdateInput } from "./AdvertiserUpdateInput";
import { AdLocationFindManyArgs } from "../../adLocation/base/AdLocationFindManyArgs";
import { AdLocation } from "../../adLocation/base/AdLocation";
import { AdLocationWhereUniqueInput } from "../../adLocation/base/AdLocationWhereUniqueInput";
import { AdSpendFindManyArgs } from "../../adSpend/base/AdSpendFindManyArgs";
import { AdSpend } from "../../adSpend/base/AdSpend";
import { AdSpendWhereUniqueInput } from "../../adSpend/base/AdSpendWhereUniqueInput";
import { BusinessCryptoFindManyArgs } from "../../businessCrypto/base/BusinessCryptoFindManyArgs";
import { BusinessCrypto } from "../../businessCrypto/base/BusinessCrypto";
import { BusinessCryptoWhereUniqueInput } from "../../businessCrypto/base/BusinessCryptoWhereUniqueInput";

export class AdvertiserControllerBase {
  constructor(protected readonly service: AdvertiserService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Advertiser })
  async createAdvertiser(
    @common.Body() data: AdvertiserCreateInput
  ): Promise<Advertiser> {
    return await this.service.createAdvertiser({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Advertiser] })
  @ApiNestedQuery(AdvertiserFindManyArgs)
  async advertisers(@common.Req() request: Request): Promise<Advertiser[]> {
    const args = plainToClass(AdvertiserFindManyArgs, request.query);
    return this.service.advertisers({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Advertiser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async advertiser(
    @common.Param() params: AdvertiserWhereUniqueInput
  ): Promise<Advertiser | null> {
    const result = await this.service.advertiser({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Advertiser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAdvertiser(
    @common.Param() params: AdvertiserWhereUniqueInput,
    @common.Body() data: AdvertiserUpdateInput
  ): Promise<Advertiser | null> {
    try {
      return await this.service.updateAdvertiser({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Advertiser })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAdvertiser(
    @common.Param() params: AdvertiserWhereUniqueInput
  ): Promise<Advertiser | null> {
    try {
      return await this.service.deleteAdvertiser({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/adLocations")
  @ApiNestedQuery(AdLocationFindManyArgs)
  async findAdLocations(
    @common.Req() request: Request,
    @common.Param() params: AdvertiserWhereUniqueInput
  ): Promise<AdLocation[]> {
    const query = plainToClass(AdLocationFindManyArgs, request.query);
    const results = await this.service.findAdLocations(params.id, {
      ...query,
      select: {
        advertiser: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        locationName: true,
        updatedAt: true,
        virtualWorld: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/adLocations")
  async connectAdLocations(
    @common.Param() params: AdvertiserWhereUniqueInput,
    @common.Body() body: AdLocationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      adLocations: {
        connect: body,
      },
    };
    await this.service.updateAdvertiser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/adLocations")
  async updateAdLocations(
    @common.Param() params: AdvertiserWhereUniqueInput,
    @common.Body() body: AdLocationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      adLocations: {
        set: body,
      },
    };
    await this.service.updateAdvertiser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/adLocations")
  async disconnectAdLocations(
    @common.Param() params: AdvertiserWhereUniqueInput,
    @common.Body() body: AdLocationWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      adLocations: {
        disconnect: body,
      },
    };
    await this.service.updateAdvertiser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/adSpends")
  @ApiNestedQuery(AdSpendFindManyArgs)
  async findAdSpends(
    @common.Req() request: Request,
    @common.Param() params: AdvertiserWhereUniqueInput
  ): Promise<AdSpend[]> {
    const query = plainToClass(AdSpendFindManyArgs, request.query);
    const results = await this.service.findAdSpends(params.id, {
      ...query,
      select: {
        advertiser: {
          select: {
            id: true,
          },
        },

        amount: true,
        createdAt: true,
        date: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/adSpends")
  async connectAdSpends(
    @common.Param() params: AdvertiserWhereUniqueInput,
    @common.Body() body: AdSpendWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      adSpends: {
        connect: body,
      },
    };
    await this.service.updateAdvertiser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/adSpends")
  async updateAdSpends(
    @common.Param() params: AdvertiserWhereUniqueInput,
    @common.Body() body: AdSpendWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      adSpends: {
        set: body,
      },
    };
    await this.service.updateAdvertiser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/adSpends")
  async disconnectAdSpends(
    @common.Param() params: AdvertiserWhereUniqueInput,
    @common.Body() body: AdSpendWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      adSpends: {
        disconnect: body,
      },
    };
    await this.service.updateAdvertiser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/businessCryptos")
  @ApiNestedQuery(BusinessCryptoFindManyArgs)
  async findBusinessCryptos(
    @common.Req() request: Request,
    @common.Param() params: AdvertiserWhereUniqueInput
  ): Promise<BusinessCrypto[]> {
    const query = plainToClass(BusinessCryptoFindManyArgs, request.query);
    const results = await this.service.findBusinessCryptos(params.id, {
      ...query,
      select: {
        advertiser: {
          select: {
            id: true,
          },
        },

        amountAcquired: true,
        createdAt: true,
        dateAcquired: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/businessCryptos")
  async connectBusinessCryptos(
    @common.Param() params: AdvertiserWhereUniqueInput,
    @common.Body() body: BusinessCryptoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      businessCryptos: {
        connect: body,
      },
    };
    await this.service.updateAdvertiser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/businessCryptos")
  async updateBusinessCryptos(
    @common.Param() params: AdvertiserWhereUniqueInput,
    @common.Body() body: BusinessCryptoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      businessCryptos: {
        set: body,
      },
    };
    await this.service.updateAdvertiser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/businessCryptos")
  async disconnectBusinessCryptos(
    @common.Param() params: AdvertiserWhereUniqueInput,
    @common.Body() body: BusinessCryptoWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      businessCryptos: {
        disconnect: body,
      },
    };
    await this.service.updateAdvertiser({
      where: params,
      data,
      select: { id: true },
    });
  }
}
